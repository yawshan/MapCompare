var mlon = null,
    mlat = null;

function parseParams(c) {
    var a = location.search.substr(1);
    if (!a) {
        a = location.hash.substr(1)
    }
    if (a != "") {
        paras = a.split("&");
        for (var b = 0; b < paras.length; b++) {
            var d = paras[b].split("=");
            c(d[0], d[1])
        }
    }
}
var available_tools = [{
    id: "map",
    name: "Map",
    loc: true,
    marker: true
}, {
    id: "mc",
    name: "Map Compare",
    loc: true,
    marker: false
}, {
    id: "osmi",
    name: "OSM Inspector",
    loc: true,
    marker: true
}];

function createNewOption(c, d, b) {
    var a = document.createElement("option");
    jQuery(a).html(d);
    a.value = c;
    a.selected = b;
    return a
}

function chooseTool() {
    var a = jQuery.grep(available_tools, function (e, d) {
        return e.id == jQuery("#tools-switcher").val()
    })[0];
    var b = "/" + a.id + "/";
    if (a.loc) {
        var c = getPosition();
        b += "?lon=" + c.lon + "&lat=" + c.lat + "&zoom=" + c.zoom;
        if (a.marker && mlon && mlat) {
            b += "&mlon=" + mlon + "&mlat=" + mlat
        }
    }
    location.href = b
}

function getPosition() {
    var b = new OpenLayers.Projection("EPSG:4326");
    var a = map.getCenter().clone().transform(map.getProjectionObject(), b);
    return new MapPosition(Math.round(a.lon * 100000) / 100000, Math.round(a.lat * 100000) / 100000, map.getZoom())
}
jQuery(document).ready(function () {
    if (jQuery("#tools-helpwin").length == 0) {
        return
    }
    jQuery("#tools-switcher").bind("change", chooseTool);
    jQuery("#tools-helpwin").jqm({
        ajax: "@href",
        trigger: "a.tools-helptrigger",
        overlay: 30,
        onLoad: function (a) {
            a.w.jqmAddClose(".dialog-close")
        }
    })
});

function MapPosition(c, b, a) {
    this.lon = c;
    this.lat = b;
    this.zoom = a
}
MapPosition.prototype.getLonLat = function () {
    return new OpenLayers.LonLat(this.lon, this.lat)
};
MapPosition.prototype.tileX = function () {
    if ((this.zoom < 3) || (this.zoom > 18)) {
        return 0
    }
    return Math.round((1 << (this.zoom - 3)) * (this.lon + 180) / 45)
};
MapPosition.prototype.tileY = function () {
    if ((this.zoom < 3) || (this.zoom > 18)) {
        return 0
    }
    var b = this.lat / 180 * Math.PI;
    var a = Math.log(Math.tan(b) + (1 / Math.cos(b)));
    return Math.round((1 << (this.zoom - 1)) * (Math.PI - a) / Math.PI)
};

function createMapPositionFromTiles(a, e, b) {
    var d;
    var c;
    if ((b < 3) || (b > 18)) {
        d = 0
    } else {
        d = (a + 0.5) * 45 / (1 << (b - 3)) - 180
    } if ((b < 3) || (b > 18)) {
        c = 0
    } else {
        c = Math.atan(sinh(Math.PI - (Math.PI * (e + 0.5) / (1 << (b - 1))))) * 180 / Math.PI
    }
    return new MapPosition(d, c, b)
}

function sinh(a) {
    return (Math.exp(a) - Math.exp(-a)) / 2
}

function createMapPosition(d, c, a, e, b) {
    if (a != null && e != null) {
        return createMapPositionFromTiles(a, e, b)
    } else {
        if (d != null && c != null) {
            return new MapPosition(d, c, b)
        } else {
            return new MapPosition(0, 0, b)
        }
    }
}

function getTileURL(d) {
    var c = this.map.getResolution();
    var a = Math.round((d.left - this.maxExtent.left) / (c * this.tileSize.w));
    var f = Math.round((this.maxExtent.top - d.top) / (c * this.tileSize.h));
    var e = this.map.getZoom();
    var b = Math.pow(2, e);
    if (f < 0 || f >= b) {
        return "/img/404.png"
    } else {
        a = ((a % b) + b) % b;
        return this.url + e + "/" + a + "/" + f + "." + this.type
    }
};