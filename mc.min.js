"use strict";

OpenLayers.ProxyHost = "/MapCompare/cgi-bin/proxy.cgi?url=";

/*WMTS服務陣列，欲增加WMTS服務，則加入陣列中*/
var WMTSLink=[
              'http://gis.sinica.edu.tw/tileserver/wmts',
              'http://gis.sinica.edu.tw/worldmap/wmts-proxy',
              'http://gis.sinica.edu.tw/fs-2/',
              'http://gis.sinica.edu.tw/tgos/wmts'
/*              'http://www.historygis.udd.taipei.gov.tw/WMTS',
              'http://maps.nlsc.gov.tw/S_Maps/wmts'*/
              ];

var mc = {
    pos: {
        lng: 121.506,
        lat: 25.065,
        zoom: 11
    },
    debug: 0,
    NumberOfMaps: 2,
    NumberOfMapsMax: 9,
    mt: ['GMap','JM20K_1904','GHybrid','TM25K_1989'],
    sort: {
        name: 1,
        type: 0,
        geofabrik: 1,
        osm: 1
    },
    sort_overlay: {
        name: 1,
        opacity: 1
    },
    numZoomLevels: 19
};
var profile = {
    google: {
        NumberOfMaps: 12,
        mt: ["google-map", "google-map-mapmaker", "google-physical", "google-satellite", "google-hybrid", "google-hybrid-mapmaker", "google-bicycle-map", "google-traffic-map", "google-transit-map", "google-layers-physical", "google-panoramio-physical", "google-weather-sat"]
    }
};
var state = {
    non_map_tags: ["tools-top", "tools-titlebar", "bottom", "m0", "m1", "m2", "debug"],
    fullscreen: false,
    console: false,
    layertypes: [],
    over_layertypes: [],
    layertypes_hash: {},
    over_layertypes_hash: {},
    maps: [],
    layers: [],
    over_layers: [],
    markersLayer: [],
    marker: [],
    moving: false,
    movestarted: false,
    proj4326: false,
    nonBaseLayer: [],
    _ie: false
};
var map;
var mapswipe;
var swipe;
var SwipeLeft;
var SwipeRight;
var Layer=[],Format=[],Title=[],url=[],SourceLink=[];
var Layers;
var count;
var swipeactivate=false;
var doit;

$(document).ready(function () {
	ParseWMTSService().done(initMapCompare);
});

function initMapCompare() {
	
    OpenLayers.Util.onImageLoadError = function () {
        this.src = "/img/404.png"
    };
    var a = mc.mt;
    var h = new OpenLayers.Projection("EPSG:4326");
    state.proj4326 = h;
    var c = new OpenLayers.Projection("EPSG:900913");
    var j = mc.NumberOfMaps;
    var l = getMapCenter();
    var b = l.lng;
    var i = l.lat;
    var p = l.zoom;
    var m = null;
    var k = null;
    
    
    parseParams(function (q, n) {
        switch (q) {
        case "type":
            a[0] = n;
            break;
        case "mt0":
            a[0] = n;
            break;
        case "mt1":
            a[1] = n;
            break;
        case "mt2":
            a[2] = n;
            break;
        case "mt3":
            a[3] = n;
            break;
        case "mt4":
            a[4] = n;
            break;
        case "mt5":
            a[5] = n;
            break;
        case "mt6":
            a[6] = n;
            break;
        case "mt7":
            a[7] = n;
            break;
        case "mt8":
            a[8] = n;
            break;
        case "mt9":
            a[9] = n;
            break;
        case "mt10":
            a[10] = n;
            break;
        case "mt11":
            a[11] = n;
            break;
        case "mt12":
            a[12] = n;
            break;
        case "mt13":
            a[13] = n;
            break;
        case "mt14":
            a[14] = n;
            break;
        case "mt-1":
            mt_overlay[0] = n;
            break;
        case "mt-1p":
            state.percent = n;
            break;
        case "lon":
            b = Number(n);
            break;
        case "lat":
            i = Number(n);
            break;
        case "url":
            l = tile2lnglat(n);
            if (l) {
                b = l.lng;
                i = l.lat;
                p = l.zoom
            } else {
                debug("cannot decode url parameter")
            }
            break;
        case "zoom":
        case "z":
            p = parseInt(n);
            break;
        case "x":
            m = parseInt(n);
            break;
        case "y":
            k = parseInt(n);
            break;
        case "num":
            j = parseInt(n);
            break;
        case "debug":
            mc.debug = parseInt(n) || 0;
            break;
        case "fullscreen":
            if (parseInt(n) > 0) {
                setTimeout(function () {
                    toggleFullScreen()
                }, 300)
            }
            break
        }
    });
    
    initKeyPress();
    initLayerTypes();
    
    
    var o = state.layertypes;
    if (j > o.length) {
        j = o.length
    }
    if (mc.NumberOfMapsMax > o.length || !mc.NumberOfMapsMax) {
        mc.NumberOfMapsMax = o.length
    }
    if (!j || j < 1 || j > mc.NumberOfMapsMax) {
        j = 2
    }
    mc.NumberOfMaps = j;
    MapOrderHtml(j);
    setMapHeight(j);
    jQuery(window).resize(function () {
        setMapHeight(j);

    });
    l = createMapPosition(b, i, m, k, p);
    OpenLayers.ImgPath = "http://static.geofabrik.de/ol212/theme/geofabrik/img/";
    initColumnWidth(j);
    var e = sortMapLayersSelected(mc.mt);
    
    for (var d = 0; d < j; d++) {
        var f = e[d];
        initColumn(d);
        initSelectOptions(d, f);
        var g = new OpenLayers.Map("map" + d, {
            theme: null,
            numZoomLevels: mc.numZoomLevels,
            controls: [],
            projection: c,
            displayProjection: state.proj4326
        });
        g.addControl(new OpenLayers.Control.Navigation());
        g.addControl(new OpenLayers.Control.MousePosition({
            div: jQuery("#customMousePosition").get(0)
        }));
        if (d == 0) {
            g.addControl(new OpenLayers.Control.PanZoomBar({
                panIcons: false
            }));
            g.addControl(new OpenLayers.Control.ScaleLine({
                geodesic: true
            }));
            g.addControl(new OpenLayers.Control.KeyboardDefaults())
        }
        state.maps[d] = g;
        newLayer(d, f);
        setStartPos(d, l.getLonLat(), l.zoom);
        initMarker(d);
        g.events.register("movestart", d, moveStart);
        g.events.register("moveend", d, moveEnd);
        g.events.register("mousemove", d, mouseMove);
        g.events.register("mouseover", d, mouseOver);
        g.events.register("mouseout", d, mouseOut);
 
    }
    
    if (j == 1) {
        initColumn(1, "none");
    }
    if(j == 2){
    	$("#tr2").append('<td id="swipetd" colspan="4"><div class="swipemap" id="mapswipe"></div></td>');
		mapswipe = new OpenLayers.Map("mapswipe", {
		     theme: null,
		     numZoomLevels: mc.numZoomLevels,
		     controls: [],
		     projection: new OpenLayers.Projection("EPSG:900913"),
		     displayProjection: new OpenLayers.Projection("EPSG:4326"),
		     allOverlays : true
		});
	 
	 SwipeRight = new MapLayer($("#sw1").val());
	 mapswipe.addLayer(SwipeRight.obj);
	 SwipeLeft = new MapLayer($("#sw0").val());
	 mapswipe.addLayer(SwipeLeft.obj);
	  
	 mapswipe.addControl(new OpenLayers.Control.Navigation());
	 mapswipe.addControl(new OpenLayers.Control.PanZoomBar({panIcons: false }));
	 mapswipe.addControl(new OpenLayers.Control.ScaleLine({geodesic: true}));
	 mapswipe.addControl(new OpenLayers.Control.LayerSwitcher());
	 mapswipe.addControl(new OpenLayers.Control.KeyboardDefaults());
	 	
	 mapswipe.setCenter(new OpenLayers.LonLat(121.506, 25.065).transform(new OpenLayers.Projection("EPSG:4326"), mapswipe.getProjectionObject()), 11);
	 swipe = new OpenLayers.Control.Swipe({map: mapswipe});
	 mapswipe.addControl(swipe);
	 $("#mapswipe").hide();
	 setSwipeMapHeight(1);
	 jQuery(window).resize(function () {
	 	setSwipeMapHeight(1);
	 	swipe.resize();
	 });
    	 
    	

    }
    
    
    
    map = state.maps[0];
    jQuery("#customMousePosition").hide();
    updatePermalink();
    updateNumberOfMapsLink(mc.NumberOfMapsMax, j, mc.NumberOfMapsLinks);
    
}

function initKeyPress() {
    function a(e, d) {
        for (var c = 0; c < state.maps.length; c++) {
            var b = state.layers[c].type.match(/^google-/) ? false : true;
            debug(state.layers[c].type + " " + b);
            state.maps[c].pan(e, d, {
                animate: b
            })
        }
    }
    OpenLayers.Control.KeyboardDefaults.prototype.defaultKeyPress = function (b) {
        switch (b.keyCode) {
        case OpenLayers.Event.KEY_LEFT:
        case 72:
            a(-this.slideFactor, 0);
            break;
        case OpenLayers.Event.KEY_RIGHT:
        case 76:
            a(this.slideFactor, 0);
            break;
        case OpenLayers.Event.KEY_UP:
        case 75:
            a(0, -this.slideFactor);
            break;
        case OpenLayers.Event.KEY_DOWN:
        case 74:
            a(0, this.slideFactor);
            break;
        case 33:
            var d = this.map.getSize();
            this.map.pan(0, -0.75 * d.h);
            break;
        case 34:
            var d = this.map.getSize();
            this.map.pan(0, 0.75 * d.h);
            break;
        case 35:
            var d = this.map.getSize();
            this.map.pan(0.75 * d.w, 0);
            break;
        case 36:
            var d = this.map.getSize();
            this.map.pan(-0.75 * d.w, 0);
            break;
        case 43:
        case 61:
        case 187:
        case 107:
            this.map.zoomIn();
            break;
        case 45:
        case 109:
        case 189:
        case 95:
            this.map.zoomOut();
            break;
        case 70:
            if (!(b.shiftKey || b.ctrlKey || b.altKey)) {
                toggleFullScreen()
            }
            break;
        case 48:
            for (var c = 0; c < 17; c++) {
                if (this.map.getZoom() < c) {
                    this.map.zoomIn()
                }
            }
            break;
        case 49:
            window.location.href = getPermalink(1);
            break;
        case 50:
            window.location.href = getPermalink(2);
            break;
        case 51:
            window.location.href = getPermalink(3);
            break;
        case 52:
            window.location.href = getPermalink(4);
            break;
        case 53:
            window.location.href = getPermalink(6);
            break;
        case 54:
            window.location.href = getPermalink(6);
            break;
        case 55:
            window.location.href = getPermalink(8);
            break;
        case 56:
            window.location.href = getPermalink(8);
            break;
        case 80:
            window.location.href = updatePermalink();
            break;
        case 191:
            jQuery(".tools-helptrigger").trigger({
                type: "click",
                which: 191
            });
            break
        }
    }
}

function sortMapLayersSelected(f) {
    var e = state.layertypes;
    var a = {};
    var d = [];
    for (var c = 0; c < f.length; c++) {
        a[f[c]] = 1;
        d.push(f[c])
    }
    for (var c = 0; c < e.length; c++) {
        var b = e[c].type;
        if (!a[b]) {
            d.push(b)
        }
    }
    return d
}

function reorderMaps(d, c) {
    var a = state[d];
    if (!c.name && !c.type) {
        return
    }

    function e(h, g) {
        return h.name == g.name ? 0 : h.name > g.name ? 1 : -1
    }

    function f(h, g) {
        return h.type == g.type ? 0 : h.type > g.type ? 1 : -1
    }

    function b(l) {
        var j = [];
        var g = {};
        var k = {};
        for (var h = 0; h < state.nonBaseLayer.length; h++) {
            k[state.nonBaseLayer[h]] = 1
        }
        for (var h = 0; h < l.length; h++) {
            if (!g[h] && c.opacity && k[l[h]] && k[l[h].type]) {
                j.push(l[h]);
                g[h] = 1
            }
        }
        for (var h = 0; h < l.length; h++) {
            if (!g[h] && c.geofabrik && l[h].name.match(/^Geofabrik/i)) {
                j.push(l[h]);
                g[h] = 1
            }
        }
        for (var h = 0; h < l.length; h++) {
            if (!g[h] && c.osm && l[h].name.match(/^OSM/i)) {
                j.push(l[h]);
                g[h] = 1
            }
        }
        for (var h = 0; h < l.length; h++) {
            if (!g[h]) {
                j.push(l[h])
            }
        }
        return j
    }
    if (c.name) {
        a = b(a.sort(e))
    } else {
        if (c.type) {
            a = a.sort(f)
        } else {}
    }
    state[d] = a
}

function setMapHeight(d) {
    var e = state.fullscreen;
    var a = jQuery(window).height();
    var b = jQuery("#head0").height();
    if (e) {} else {
        a += - jQuery("#tools-titlebar").height() - jQuery("#bottom").height();
        a -= 40
    }
    var c;
    if (d <= 3) {
        c = a + (e ? -3 : 5)
    }else if(d==9){
    	c = a/3 +(e ? 0 : 1)
    }else {
        c = a / 2 + (e ? 0 : 1)
    }
    c -= b;
    jQuery(".map").height(Math.floor(c - (e ? -16 : 5)))
}

function initLayerTypes() {
    var b = "AnlZwa5p0zgN6mSGFEULXVJgqmUsl8K8GdC_P7MBTVUQSuDY4LR-szxGn-SdpztI";
    var a = {
        tileOptions: {
            crossOriginKeyword: null
        },
        sphericalMercator: true,
        numZoomLevels: 19
    };
    var matrixIds = new Array(26);
    for (var i=0; i<26; ++i) {
        matrixIds[i] = "EPSG:900913:" + i;
    }
    /*以下為MapCompare預設之圖層*/
    /* state.layertypes = [
       new LayerType("google-map", "Google 地圖", function () {
        return new OpenLayers.Layer.Google("Google (Map)", {
            type: google.maps.MapTypeId.ROADMAP
        })
    }), new LayerType("google-satellite", "Google 衛星影像", function () {
        return new OpenLayers.Layer.Google("Google (Satellite)", {
            type: google.maps.MapTypeId.SATELLITE
        })
    }), new LayerType("google-hybrid", "Google 衛星地圖", function () {
        return new OpenLayers.Layer.Google("Google (Hybrid)", {
            type: google.maps.MapTypeId.HYBRID
        })
    })]; */
    
    /*加入所include之各WMTS服務內之圖層*/
    for(var i=0; i<Layer.length; i++){
        state.layertypes.push(createLayerType.apply({layer:Layer[i],url:url[i],title:Title[i], format:Format[i],sourcelink:SourceLink[i]}));
    }
        
    reorderMaps("layertypes", mc.sort);
}		

var  createLayerType = function() {return new LayerType(this.layer, this.title, bind(this, function() {
	/*判斷WMTS是否具有ResourceURL，若有則以OpenLayers.Layer.XYZ class存取，若無則以OpenLayers.Layer.WMTS*/
	if(this.sourcelink != null && this.sourcelink != ""){
		return new OpenLayers.Layer.XYZ(this.title,this.sourcelink);
	}else{
		return new OpenLayers.Layer.WMTS({
            name: this.title,
            url: this.url,
            layer: this.layer,
            matrixSet: "GoogleMapsCompatible",
            format: this.format,
            style: "_null",
            opacity: 0.7,
            wrapDateLine: true
        });}
	}
        )
);};

var bind = function(scope, func) {
    return function()  {
        return func.apply(scope, arguments);
    };
};

function initMarker(a) {
    state.markersLayer[a] = new OpenLayers.Layer.Markers("Marker");
    state.maps[a].addLayer(state.markersLayer[a]);
    state.marker[a] = new OpenLayers.Marker(state.maps[a].getCenter(), new OpenLayers.Icon("../MapCompare/img/cross.png", new OpenLayers.Size(20, 20), new OpenLayers.Pixel(-10, -10)));
    state.markersLayer[a].setVisibility(false);
    state.markersLayer[a].addMarker(state.marker[a])
}

function setVisibilityWrapper(a, b) {
    if (a) {
        a.setVisibility(b)
    } else {
        setTimeout(function () {
            if (a) {
                a.setVisibility(b)
            }
        }, 2000)
    }
}

function moveStart() {
    state.movestarted = true;
    for (var a = 0; a < mc.NumberOfMaps; a++) {
        setVisibilityWrapper(state.markersLayer[a], false)
    }
    return (false)
}

function moveEnd() {
    if (state.moving) {
        return
    }
    state.moving = true;
    for (var a = 0; a < mc.NumberOfMaps; a++) {
        if (a != this && state.maps[a]) {
            state.maps[a].setCenter(state.maps[this].getCenter().clone().transform(state.maps[this].getProjectionObject(), state.maps[a].getProjectionObject()), state.maps[this].getZoom())
        }
        setVisibilityWrapper(state.markersLayer[a], true)
    }
    state.moving = false;
    updatePermalink();
    state.movestarted = false;
    return false
}

function mouseMove(a) {
    for (var b = 0; b < mc.NumberOfMaps; b++) {
        if (b != this && state.marker[b]) {
            state.marker[b].moveTo(state.maps[this].getLayerPxFromViewPortPx(a.xy))
        }
    }
    return (false)
}

function mouseOver(a) {
    if (!state.movestarted) {
        for (var b = 0; b < mc.NumberOfMaps; b++) {
            if (b != this) {
                setVisibilityWrapper(state.markersLayer[b], true)
            }
        }
    }
    jQuery("#customMousePosition").show();
    return (false)
}

function mouseOut(a) {
    for (var b = 0; b < mc.NumberOfMaps; b++) {
        setVisibilityWrapper(state.markersLayer[b], false)
    }
    jQuery("#customMousePosition").hide();
    return (false)
}

function initSelectOptions(f, e) {
    var a = jQuery("#sw" + f);
    if (!a) {
        return
    }
    for (var d = 0; d < state.layertypes.length; d++) {
        var b = state.layertypes[d];
        var c = document.createElement("option");
        c.value = b.type;
        c.text = b.name;
        c.style.padding = "1px";
        if (b.type == e) {
            c.selected = true
        }
        a[0].options[d] = c
    }
    a.bind("change", f, changeLayer)
    if(f==0 || f==1){
    	a.bind("change",f,updateSwipeLayer)
    }
}

function showTransparentMenu(b, c) {
    if (!c) {
        c = -2
    }
    var a = mc.overlay.type == "select" ? $("#sw" + c) : $("#slider_box");
    if (!a) {
        return
    }
    b ? a.show() : a.hide()
}

function initColumn(c, b) {
    if (!b) {
        b = "table-cell"
    }
    var a = jQuery("#column" + c);
    a.css("display", b)
}

function initColumnWidth(c) {
    var b;
    if (c <= 3) {
        b = c
    } else {
        b = Math.ceil(c / 2)
    }
    var a = Math.floor(100 / b) + "%";
    jQuery("td.maps").css("width", a)
}

function setStartPos(e, c, b) {
    var a = c.clone();
    a.transform(state.proj4326, state.maps[e].getProjectionObject());
    var d = state.maps[e].getNumZoomLevels(b) - 1;
    if (d < b) {
        b = d
    }
    state.maps[e].setCenter(a, b)
}

function updatePermalink() {
    var a = getPermalink(mc.NumberOfMaps);
    // jQuery("#permalink")[0].href = a;
    jQuery("#customZoomLevel").html("zoom=" + state.maps[0].getZoom());
    return a;
}

function getPermalink(c) {
    var d = getPosition();
    var a = "?lon=" + d.lon + "&lat=" + d.lat + "&zoom=" + d.zoom + "&num=" + c;
    for (var b = 0; b < mc.NumberOfMapsMax; b++) {
        if (state.layers[b]) {
            a += "&mt" + b + "=" + state.layers[b].type
        }
    }
    if (state.over_layers[0] && state.over_layers[0] != "none") {
        a += "&mt-1=" + state.over_layers[0];
        a += "&mt-1p=" + state.percent
    }
    if (state.fullscreen) {
        a += "&fullscreen=1"
    }
    return a
}

function updateNumberOfMapsLink(e, d, a) {
    var c = "切換視窗數目: ";
    for (var b = 1; b <= e; b++) {
        if (ignoreLink(e, d, a, b)) {
            continue
        }
        if (b > 1) {
            c += " "
        }
        if (b == d) {
            c += b
        } else {
            c += "<a href='#' onclick='this.href=getPermalink(" + b + ");'>" + b + "</a>"
        }
    }
    jQuery("#NumberOfMaps").html(c)
}

function ignoreLink(d, c, a, b) {
    if (a && (c < a) && b > a) {
        return 1
    }
    if (b == 5 || b == 7) {
        return 1
    }
    if (d == b) {
        return 0
    }
    if (b > a && b <= mc.row3 && b % 2 == 1) {
        return 1
    }
    return 0
}

function LayerType(c, a, b) {
    this.type = c;
    this.name = a;
    this.create = b;
    state.layertypes_hash[c] = this
}

function MapLayer(b) {
    var c = "mapnik";
    debug("MapLayer: " + b);
    var a = state.layertypes_hash[b];
    if (!a) {
        debug("unknown layer type: '" + b + "', fall back to " + c);
        a = state.layertypes_hash[c];
        if (!a) {
            return {}
        }
    }
    this.layer = a;
    this.type = a.type;
    this.name = a.name;
    this.obj = a.create()
}

function newLayer(b, a) {
    state.layers[b] = new MapLayer(a);
    state.maps[b].addLayer(state.layers[b].obj)
}

function changeLayer(d) {
    var g = d.data;
    var h = state.maps;
    var i = h[g].getProjectionObject();
    var b = h[g].getCenter().clone();
    var a = h[g].getZoom();
    var c = d.target.value;
    h[g].removeLayer(h[g].baseLayer);
    newLayer(g, c);
    try {
        state.layers[g].obj.setMapType()
    } catch (f) {}
    h[g].setCenter(b.transform(i, h[g].getProjectionObject()), a);
    updatePermalink()
}

function MapOrderHtml(f) {
    var d = jQuery("tr#tr0");
    var b = jQuery("tr#tr1");
    var nine=jQuery("tr#tr2");
    var c = "";
    var a = "";
    var n = "";
    if (f <= 3) {
    	if(f==2){
    		FormMap2();
    	}else{
    		for (var e = 0; e < f; e++) {
                c += MapTD(e)
            }
            d.html(c)
    	}

    } else if(f==9){
    	var g = Math.ceil(f / 3);
        for (var e = 0; e < f; e++) {
            if (e < 3) {
                c += MapTD(e)
            }else if(e>5){
            	n += MapTD(e)
            }else {
            	a += MapTD(e)
            }
        }
        d.html(c);
        b.html(a);
        nine.html(n);
    }else {
        var g = Math.ceil(f / 2);
        for (var e = 0; e < f; e++) {
            if (e < g) {
                c += MapTD(e)
            } else {
                a += MapTD(e)
            }
        }
        d.html(c);
        b.html(a);
    }
}

function MapTD(b) {
    var a = mc.NumberOfMaps >= 7 ? "" : "選擇圖層 ";
    var c = "";
   	c += '<td class="maps" id="column' + b + '">';
    c += '   <form action="" class="switch" id="head' + b + '">';
    c += "      <div>" + a + '<select id="sw' + b + '" name="sw' + b + '"><option/></select></div>';
    c += "   </form>";
    c += '   <div class="map" id="map' + b + '"></div>';
    c += "</td>";
    return c
}

function FormMap2() {
	var d = jQuery("tr#tr0");
    var b = jQuery("tr#tr1");
    var a = mc.NumberOfMaps >= 7 ? "" : "選擇圖層 ";
    var c = "";
    var m = "";
   	c += '<td  id="column0" colspan="1" style="width: 45%;padding-bottom: 0px;"><form action="" class="switch" id="head0">' + a +
   	'<select id="sw0" name="sw0"><option/></select></div></form></td>';
   	c += '<td colspan="2" style="width: 10%;padding-bottom: 0px" align="center"><a id=\"swipe\">套疊比對</a></td>';
   	c += '<td id="column1" colspan="1" style="width: 45%;padding-bottom: 0px"><form action="" class="switch" id="head1">' + a +
   	'<select id="sw1" name="sw1"><option/></select></div></form></td>';
   	d.html(c);
   	
    m += ' <td colspan="2"><div class="map" id="map0"></div></td>';
    m += ' <td colspan="2"><div class="map" id="map1"></div></td>';
    b.html(m);
}

function toggleFullScreen() {
    var b = !state.fullscreen;
    for (var a = 0; a < state.non_map_tags.length; a++) {
        toggleID(state.non_map_tags[a], b)
    }
    for (var a = 0; a < mc.NumberOfMaps; a++) {
        toggleID("head" + a, b)
    }
    state.fullscreen = b;
    setMapHeight(mc.NumberOfMaps);
    if (b) {
        $("#fullscreen").removeClass("font_deactive").addClass("font_active")
    } else {
        $("#fullscreen").removeClass("font_active").addClass("font_deactive")
    }
    
}

function toggleID(c, b) {
    var a = jQuery("#" + c);
    if (a) {
        b ? a.hide() : a.show()
    }
}

function debug(d, e) {
    if (!mc.debug) {
        return
    }
    if (!window.console) {
        return
    }
    console.log("Map Compare: " + d);
    if (mc.debug == 1) {
        return
    }
    if (!e) {
        e = "debug"
    }
    var a = jQuery("#" + e);
    if (!a) {
        return
    }
    var c = "debug: ";
    var b = a.html() ? a.html() + "; " : c;
    a.html((mc.debug == 3 ? b : c) + d)
}

function getMapCenter(b) {
    var d = {};
    var e;
    var c = mc.pos.zoom;
    parseParams(function (g, f) {
        d[g] = unescape(f).replace(/\+*$|^\+*/g, "").replace(/\+/g, " ")
    });
    var a = b || d.center;
    if (!a) {
        return mc.pos
    }
    if (a.match(/^http:/)) {
        e = tile2lnglat(a);
        if (e) {
            return e
        } else {
            debug("could not parse URL: " + a);
            return mc.pos
        }
    } else {
        e = a.split(",");
        if (e.length < 2) {
            debug("unknown pos: " + a);
            return mc.pos
        }
        if (!check_lng(e[0])) {
            debug("unknown lng: " + e[0]);
            return mc.pos
        }
        if (!check_lat(e[1])) {
            debug("unknown lat: " + e[1]);
            return mc.pos
        }
        if (e[2]) {
            if (e[2] == NaN || e[2] > 20 || e[2] < 0) {
                debug("unknown zoom level: " + e[2] + ", ignored")
            } else {
                c = e[2]
            }
        }
        var d = {
            lng: e[0],
            lat: e[1],
            zoom: c
        };
        return d
    }
};

function ParseWMTSService(){
	var start = new Date();
	var deferred = $.Deferred();
	count=0
	for(var k=0; k<WMTSLink.length;k++){
	OpenLayers.Request.GET({
	     url: WMTSLink[k],
	     params: {
	         SERVICE: "WMTS",
	         VERSION: "1.0.0",
	         REQUEST: "GetCapabilities"
	     },
	     success: function(request) {
	    		var doc;
	    	    var xmlformat = new OpenLayers.Format.XML();
	    	    
	    		if(!request.responseXML.documentElement) {
	    	        doc = xmlformat.read(request.responseText);
	    	        
	    	    } else {
	    	        doc = request.responseXML;
	    	    }
	    		
	    	    Layers = xmlformat.getElementsByTagNameNS(doc, 'http://www.opengis.net/wmts/1.0', 'Layer');
	    	    
	    	    for(var i=0;i<Layers.length;i++){
	    	    	Title.push(Layers[i].childNodes[1].innerHTML);
	    	    	url.push(WMTSLink[count]);
	    	    	Layer.push(Layers[i].childNodes[3].innerHTML);
	    	    	Format.push(Layers[i].childNodes[9].innerHTML);
	    	    	SourceLink.push(Layers[i].childNodes[13].getAttribute("template").replace('{TileMatrix}','${z}').replace('{TileCol}','${x}').replace('{TileRow}','${y}'))
	    	    }
	    	    
	    	    
	    	},
	     failure: loadFailure
	 });
	}
	setTimeout(function () {
    	deferred.resolve();
      }, (new Date() - start)*200);
    return deferred;
}
function loadFailure(request) {
	alert("Trouble getting capabilities doc");
    OpenLayers.Console.error.apply(OpenLayers.Console, arguments);
    return false;
}
function setSwipeMapHeight(d) {
    var e = state.fullscreen;
    var a = jQuery(window).height();
    var b = jQuery("#head0").height();
    if (e) {} else {
        a += - jQuery("#tools-titlebar").height() - jQuery("#bottom").height();
        a -= 40
    }
    var c;
    if (d <= 3) {
        c = a + (e ? -3 : 5)
    }else if(d==9){
    	c = a/3 +(e ? 0 : 1)
    }else {
        c = a / 2 + (e ? 0 : 1)
    }
    c -= b;
    jQuery(".swipemap").height(Math.floor(c - (e ? -16 : 5)))
    
}
function updateSwipeLayer() {
	
	for (var i = mapswipe.layers.length - 1; i >= 0; i--) {
		mapswipe.layers[i].destroy();
        } 
	swipe.deactivate()
    SwipeRight = new MapLayer($("#sw1").val());
    mapswipe.addLayer(SwipeRight.obj)
    SwipeLeft = new MapLayer($("#sw0").val());
    mapswipe.addLayer(SwipeLeft.obj)
    swipe.activate()

    updatePermalink();
}
function updatePosition(){
	var vismapswipe = $("#mapswipe").is(":visible");
	var twoMapProj = state.maps[0].getProjectionObject();
    var twoMapCenter = state.maps[0].getCenter().clone();
    var twoMapZoom = state.maps[0].getZoom();
    var mapswipeProj = mapswipe.getProjectionObject();
    var mapswipeCenter =mapswipe.getCenter().clone();
    var mapswipeZoom =mapswipe.getZoom();
	if(vismapswipe){
		mapswipe.setCenter(twoMapCenter.transform(twoMapProj, state.maps[0].getProjectionObject()), twoMapZoom);
	}else{
		state.maps[0].setCenter(mapswipeCenter.transform(mapswipeProj, mapswipe.getProjectionObject()), mapswipeZoom);
		state.maps[1].setCenter(mapswipeCenter.transform(mapswipeProj, mapswipe.getProjectionObject()), mapswipeZoom);
	}
}
$(document.body).on('click', "#swipe",  function()	{
	  $("#tr1").toggle();
	  $("#mapswipe").toggle(); 
	  mapswipe.updateSize();
	  if(swipeactivate==false){
		  updatePosition();
		  swipe.activate();
		  $("#swipe").text("雙視窗比對")
		  swipeactivate=true;
	  }else{
		  updatePosition();
		  swipe.deactivate();
		  swipeactivate=false;
		  $("#swipe").text("套疊比對")
	  }
});

function fixMargin() {
    var container = $("#map0"); // this is the div with the auto-margin
    var diff = $(window).width() - container.width(); 
    var margin = parseInt(diff/2); 
    container.css('margin-left', margin);
}

// Only apply fix in FireFox
if ($.browser.mozilla) {
    fixMargin(); // call it once on application startup
    $(window).resize(fixMargin); // and call it again after every resize event
}